[[ -f ~/.fzf.zsh ]] && source ~/.fzf.zsh
# Automatically quote globs in URL and remote references
# http://superuser.com/questions/420525/scp-with-zsh-no-matches-found
__remote_commands=(scp rsync)
autoload -U url-quote-magic
zle -N self-insert url-quote-magic
zstyle -e :urlglobber url-other-schema '[[ $__remote_commands[(i)$words[1]] -le ${#__remote_commands} ]] && reply=("*") || reply=(http https ftp)'

zstyle -e ':completion:*:(ssh|scp|sftp|rsync):hosts' hosts 'reply=(${=${${(f)"$(cat {/etc/ssh_,~/.ssh/known_}hosts(|2)(N) /dev/null)"}%%[# ]*}//,/ })'

unsetopt share_history

fpath=(/usr/local/share/zsh-completions $fpath)

autoload -Uz compinit
compinit
# Completion for kitty
kitty + complete setup zsh | source /dev/stdin

export EDITOR=nvim
export VISUAL=nvim
export BROWSER=/usr/bin/brave-browser

export GOPATH=$HOME/projects
export PATH=$PATH:$GOPATH/bin

export PATH=$PATH:${HOME}/.local/bin

if [ -e /usr/local/share/zsh/site-functions/_aws ]; then
  source /usr/local/share/zsh/site-functions/_aws
fi

if [ -e ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
  source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
fi

autoload -Uz vcs_info

zstyle ':vcs_info:*' stagedstr '%F{green}●'
zstyle ':vcs_info:*' unstagedstr '%F{yellow}●'
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{11}%r'
zstyle ':vcs_info:*' enable git

theme_precmd () {
  if [[ -z $(git ls-files --other --exclude-standard 2> /dev/null) ]] {
      zstyle ':vcs_info:*' formats ' %b%c%u%B%F{green}'
  } else {
      zstyle ':vcs_info:*' formats ' %b%c%u%B%F{red}●%F{green}'
  }

  vcs_info
}

start_time=$SECONDS
function prompt_paradox_preexec {
  start_time=$SECONDS
}

time_precmd () {
  timer_result=$(($SECONDS-$start_time))
  if [[ $timer_result -gt 5 ]]; then
    calc_elapsed_time
  else
    unset timer_result
  fi
  start_time=$SECONDS
}

calc_elapsed_time () {
  if [[ $timer_result -ge 3600 ]]; then
    let "timer_hours = $timer_result / 3600"
    let "remainder = $timer_result % 3600"
    let "timer_minutes = $remainder / 60"
    let "timer_seconds = $remainder % 60"
    timer_result="${timer_hours}h${timer_minutes}m${timer_seconds}s"
  elif [[ $timer_result -ge 60 ]]; then
    let "timer_minutes = $timer_result / 60"
    let "timer_seconds = $timer_result % 60"
    timer_result="${timer_minutes}m${timer_seconds}s"
  else
    timer_result="${timer_result}s"
  fi
}

# Base16 Shell
BASE16_SHELL="$HOME/.config/base16-shell/"
[ -n "$PS1" ] && \
    [ -s "$BASE16_SHELL/profile_helper.sh" ] && \
        eval "$("$BASE16_SHELL/profile_helper.sh")"

setopt prompt_subst
PROMPT='%F{cyan}${timer_result} %{$fg_bold[blue]%}%c%{$reset_color%}%B%F{green}${vcs_info_msg_0_}%B%F{magenta} %{$reset_color%}%% '

autoload -U add-zsh-hook
add-zsh-hook precmd  theme_precmd
add-zsh-hook precmd  time_precmd

wtf () {
  cat << EOF
(ノ ゜Д゜)ノ ︵ ┻━┻
CTRL + Q - binding for tmux
CTRL + U – Cuts text up until the cursor
CTRL + K – Cuts text from the cursor until the end of the line
CTRL + Y – Pastes text
CTRL + E – Move cursor to end of line
CTRL + A – Move cursor to the beginning of the line
ALT + F – Jump forward to next space
ALT + B – Skip back to previous space
ALT + Backspace – Delete previous word
CTRL + W – Cut word behind cursor
EOF
}

notify () {
  pusher -i 2093 DONE
}

cycleWifi () {
  sudo nmcli con down ${1}
  sudo nmcli con up ${1}
}

cycleNet () {
  set -x
  if [[ -z "${1}" ]]; then
    wifi=$(nmcli con show | gep wlp61s0 | awk {'pr $1'})
    cycleWifi ${wifi}
  else
    cycleWifi ${1}
  fi
  set +x
}

#eval $(op signin gitlab)

# GPG Agent stuffs
if [[ -z "$(pgrep gpg-agent)" ]]
then
  echo "Starting a gpg agent"
  eval $(gpgconf --launch gpg-agent)
else
  echo "Not starting an agent"
  clear
fi

if $(which kubectl 2>&1 > /dev/null)
then
  source <(kubectl completion zsh)
fi

if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
  function zle-line-init() {
    echoti smkx
  }
  function zle-line-finish() {
    echoti rmkx
  }
  zle -N zle-line-init
  zle -N zle-line-finish
fi

bindkey -e # Use emacs key bindings

source $HOME/.asdf/asdf.sh
source $HOME/.asdf/completions/asdf.bash
# ruby binstubs - see the aliases file
export PATH='./.bin':$PATH

# krew
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/home/skarbek/Downloads/google-cloud-sdk/path.zsh.inc' ]; then source '/home/skarbek/Downloads/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/home/skarbek/Downloads/google-cloud-sdk/completion.zsh.inc' ]; then source '/home/skarbek/Downloads/google-cloud-sdk/completion.zsh.inc'; fi

killall ssh-agent
unset SSH_AGENT_PID
if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
  export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
fi
gpg-connect-agent updatestartuptty /bye

if [ -e ~/.gitlab-env ]; then
  source ~/.gitlab-env
fi

gmr() {
  if [[ $# -gt 0 ]]
  then
    git log --reverse --format="### %H - %s%n%n%b" "$@"
  else
    git log --reverse --format="### %H - %s%n%n%b" HEAD...master
  fi
}

# start X if on TTY 1
if [[ -z $DISPLAY && $XDG_VTNR -eq 1 ]]
then
    exec startx
fi

ktx() {
  env=$1
  zone=$2

  if [[ -n "$zone" ]]; then
    context=$(kubectx | grep "$env" | grep "us-east1-${zone}_")
  else
    context=$(kubectx | grep "$env" | grep "us-east1_")
  fi

  if [[ -z "$context" ]]; then
    echo 'No context found.'
    return 1
  fi

  echo "Switching to $context"
  kubectx "$context"

  ip=$(kubectl config view --minify --output json | jq -r .clusters[0].cluster.server | tr -d 'https://')

  echo 'Starting up sshuttle...'

  case $env in
    gprd)
      sshuttle -r console-01-sv-gprd.c.gitlab-production.internal "${ip}/32"
      kubectx gke_gitlab-pre_us-east1_pre-gitlab-gke
      ;;
    gstg)
      sshuttle -r console-01-sv-gstg.c.gitlab-staging-1.internal "${ip}/32"
      kubectx gke_gitlab-pre_us-east1_pre-gitlab-gke
      ;;
    ops)
      sshuttle -r lb-bastion.ops.gitlab.com "${ip}/32"
      kubectx gke_gitlab-pre_us-east1_pre-gitlab-gke
      ;;
    org-ci)
      sshuttle -r lb-bastion.org-ci.gitlab.com "${ip}/32"
      kubectx gke_gitlab-pre_us-east1_pre-gitlab-gke
      ;;
    *)
      echo 'Unsure what env to handle.'
      return 1
      ;;
  esac
}
